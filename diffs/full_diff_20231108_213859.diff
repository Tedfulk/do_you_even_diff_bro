--- a/py_do_you_even_diff_bro/commandments.py
+++ b/py_do_you_even_diff_bro/commandments.py
 You're a mid level coder bro. You're starting to rise the ranks so you have something to lose by not reviewing your bro's code and by reviewing poorly. You look for any critical bugs, improvements, and you also look for any formatting, naming, pass statements in try blocks, etc. You focus on code that could lead to critical bugs and you also look for any code that could lead to non-critical bugs. You're a mid level BROGRAMMER.
 """
 
-CHAD_BRO_PR_REVIEW_PROMPT = f"""{CORE_DIFF_SYSTEM_PROMPT}
+CHAD_BRO_PR_REVIEW_PROMPT = """
+# Mission
+- Outcome or goal: Boost code to legendary status.
+- Not procedure: We're here for the gains, not the pain.
+
+# Context
+- Background info: It's crunch time, code dojo's open.
+- Where in the process are you: Just before we unleash the beast (aka deploy).
+- Why does it need to be done: 'Cause no one wants to be the 'It compiled, let's ship it' guy.
+
+# Rules
+- Boundaries and constraints: Prioritize bugs by severity like a DJ with tracks.
+- Specific subgoals and objectives: Highs then mediums, lows are just the warm-up.
+
+# Instructions
+- Do X: Sniff out bugs like a midnight energy drink.
+- Do Y: Flex your brain and rate those bugs, bro.
+- Do Z: Tidy up that code like it's your dorm room before parents' visit.
+
+# Expected Input
+- What to anticipate: A mixed bag of diffs, some clean, some messier than a frat house.
+- Variability: From 'just a typo' to 'who wrote this while riding a rollercoaster?'.
+
+# Output Format
+- Formatting, type of output, length: Think epic poem but in JSON.
+- JSON, XML, lists, etc: JSON, 'cause we're classy.
+
+# Example Output
+{
+  "summary": "Code review unveiled both champions and challengers in the code.",
+  "severities": {
+    "high": [
+      {
+        "bug_id": "B9001",
+        "description": "Memory leak in the arena's foundation (data processing module)."
+      }
+    ],
+    "medium": [
+      {
+        "bug_id": "B9002",
+        "description": "Slow chariot race (inefficient database query)."
+      }
+    ],
+    "low": [
+      {
+        "bug_id": "B9003",
+        "description": "Crooked helmet crest (misaligned comment formatting)."
+      }
+    ]
+  },
+  "suggestions": {
+    "high": [
+      {
+        "bug_id": "B9001",
+        "improvements": "Strengthen the arena's foundation by plugging the memory leak. Consider using smart pointers for automatic resource management.",
+        "code": "def process_data(data: List[str]) -> None: # FIXME: Potential memory leak here"
+      }
+    ],
+    "medium": [
+      {
+        "bug_id": "B9002",
+        "improvements": "Speed up the chariot by optimizing the database query. Add indexes or restructure the query for better performance.",
+        "code": "SELECT * FROM chariots WHERE speed < 5 # FIXME: Inefficient query, consider indexing"
+      }
+    ]
+  }
+}
+"""
+# CHAD_BRO_PR_REVIEW_PROMPT = f"""{CORE_DIFF_SYSTEM_PROMPT}
 
-DETAILS:
+# DETAILS:
 
-Yo, CodeMaster Chad here! You're the alpha of the coding pack, the legend who lifts more lines of code than weights. Your job? Flex those coding muscles and review your bros' code like you're spotting them at the gym. 
-Hunt down those bugs like you're on a protein-packed coding diet - focus on the big gains (critical bugs) and don't miss out on the smaller reps (non-critical stuff). Your code should be as clean and ripped as your post-workout selfie.
-Rate those bugs like you're judging a beach body contest: high, medium, low. Stack them up like you're organizing your protein shakes - the heaviest, most muscle-making bugs at the top, and the lightweight, just-for-the-taste bugs at the bottom.
-Remember, you're the Chad of the Code. Double-check everything like you check yourself out in the mirror. Zero tolerance for buggy code in these iron-pumping, key-smashing fingers. Let's make this code as buff as our biceps, bro!
+# Yo, CodeMaster Chad here! You're the alpha of the coding pack, the legend who lifts more lines of code than weights. Your job? Flex those coding muscles and review your bros' code like you're spotting them at the gym. 
+# Hunt down those bugs like you're on a protein-packed coding diet - focus on the big gains (critical bugs) and don't miss out on the smaller reps (non-critical stuff). Your code should be as clean and ripped as your post-workout selfie.
+# Rate those bugs like you're judging a beach body contest: high, medium, low. Stack them up like you're organizing your protein shakes - the heaviest, most muscle-making bugs at the top, and the lightweight, just-for-the-taste bugs at the bottom.
+# Remember, you're the Chad of the Code. Double-check everything like you check yourself out in the mirror. Zero tolerance for buggy code in these iron-pumping, key-smashing fingers. Let's make this code as buff as our biceps, bro!
 """
 # CHAD_BRO_PR_REVIEW_PROMPT = f"""{CORE_DIFF_SYSTEM_PROMPT}
 
--- a/py_do_you_even_diff_bro/main.py
+++ b/py_do_you_even_diff_bro/main.py
 import typer
+from typer import Option, Argument, prompt, confirm
+from typing import List
 from rich.console import Console
 from rich.table import Table
 from py_do_you_even_diff_bro.commandments import SUMMARY_BRO_PROMPT, get_diff_prompt
     console.print(table)
 
 
+def validate_extensions(
+    ctx: typer.Context, param: typer.CallbackParam, value: List[str]
+) -> List[str]:
+    invalid_exts = [ext for ext in value if ext not in PROGRAMMING_FILE_EXTENSIONS]
+    if invalid_exts:
+        for ext in invalid_exts:
+            console.log(f"Invalid file extension: {ext}", style="bold red")
+        raise typer.BadParameter(f"Invalid extensions: {', '.join(invalid_exts)}")
+    return value
+
+
 @app.command()
 def main(
     chill: bool = typer.Option(
     only: list[str] = typer.Option(
         PROGRAMMING_FILE_EXTENSIONS,
         "--only",
+        callback=validate_extensions,
         help="Only include files with these extensions",
     ),
     ignore: list[str] = typer.Option(
-        [], "--ignore", help="Ignore files with these extensions"
+        [],
+        "--ignore",
+        callback=validate_extensions,
+        help="Ignore files with these extensions",
     ),
     prompt: str = typer.Option("", "--prompt", "-p", help="Specify a custom prompt"),
     summarize: bool = typer.Option(
--- a/py_do_you_even_diff_bro/models.py
+++ b/py_do_you_even_diff_bro/models.py
 from py_do_you_even_diff_bro.utils import StrEnum
+from pydantic import BaseModel, Field, validator
+from typing import List, Optional
+from datetime import datetime
 
 
 class BroMode(StrEnum):
     CHILL = "chill"
     MID = "mid"
     CHAD = "chad"
+
+
+class BugBase(BaseModel):
+    bug_id: str
+    description: str
+
+    @validator("bug_id")
+    def validate_bug_id(cls, v):
+        if not v.startswith("B") or not v[1:].isdigit():
+            raise ValueError("bug_id must start with B followed by numbers")
+        return v
+
+
+class BugReport(BugBase):
+    pass
+
+
+class BugImprovement(BugBase):
+    improvements: str
+    code: str
+
+
+class SeverityReports(BaseModel):
+    high: Optional[List[BugReport]] = []
+    medium: Optional[List[BugReport]] = []
+    low: Optional[List[BugReport]] = []
+
+
+class SeverityImprovements(BaseModel):
+    high: Optional[List[BugImprovement]] = []
+    medium: Optional[List[BugImprovement]] = []
+
+
+class MetaData(BaseModel):
+    timestamp: Optional[datetime] = Field(default_factory=datetime.utcnow)
+    session_id: Optional[str]
+    user_info: Optional[dict]
+
+
+class ErrorModel(BaseModel):
+    error_message: Optional[str]
+    error_code: Optional[int]
+
+
+class CodeReview(BaseModel):
+    summary: str
+    severities: SeverityReports
+    suggestions: SeverityImprovements
+    metadata: Optional[MetaData] = Field(default_factory=MetaData)
+    error: Optional[ErrorModel]
--- a/py_do_you_even_diff_bro/utils.py
+++ b/py_do_you_even_diff_bro/utils.py
 import subprocess
 from enum import Enum
 from typing import Type
+from datetime import datetime
+import os
 
 
 class StrEnum(str, Enum):
--- a/pyproject.toml
+++ b/pyproject.toml
 pytest = "^7.4.3"
 pydantic = "^2.4.2"
 typer = {extras = ["all"], version = "^0.9.0"}
+pytest-mock = "^3.12.0"
+unidiff = "^0.7.5"
 
 
 [tool.poetry.group.dev.dependencies]
--- a/tests/test_main.py
+++ b/tests/test_main.py
 import pytest
-from py_do_you_even_diff_bro.main import get_bro_mode, display_diff_summary, main
+
+import py_do_you_even_diff_bro.main
+from py_do_you_even_diff_bro.main import (
+    display_diff_summary,
+    get_bro_mode,
+    get_git_diff,
+    main,
+)
 from py_do_you_even_diff_bro.models import BroMode
 
+
 def test_get_bro_mode():
     assert get_bro_mode(True, False, False) == BroMode.CHILL
     assert get_bro_mode(False, True, False) == BroMode.MID
     assert get_bro_mode(False, False, True) == BroMode.CHAD
     assert get_bro_mode(False, False, False) == BroMode.CHILL
 
+
 def test_display_diff_summary(mocker):
-    mocker.patch('py_do_you_even_diff_bro.main.console')
+    mocker.patch("py_do_you_even_diff_bro.main.console")
     display_diff_summary("Test summary")
     py_do_you_even_diff_bro.main.console.print.assert_called_once()
 
-@pytest.mark.parametrize("chill, mid, chad, model, only, ignore, prompt, summarize, peer_review", [
-    (True, False, False, 'gpt-4', ['.py'], [], '', False, ''),
-    (False, True, False, 'gpt-3.5-turbo', ['.py'], ['.txt'], 'Test prompt', True, 'main')
-])
-def test_main(chill, mid, chad, model, only, ignore, prompt, summarize, peer_review, mocker):
-    mocker.patch('py_do_you_even_diff_bro.main.get_git_diff', return_value="Test diff")
-    mocker.patch('py_do_you_even_diff_bro.main.gpt_prompt', return_value="Test response")
+
+@pytest.mark.parametrize(
+    "chill, mid, chad, model, only, ignore, prompt, summarize, peer_review",
+    [
+        (True, False, False, "gpt-4", [".py"], [], "", False, ""),
+        (
+            False,
+            True,
+            False,
+            "gpt-3.5-turbo",
+            [".py"],
+            [".ts"],
+            "Test prompt",
+            True,
+            "main",
+        ),
+    ],
+)
+def test_main(
+    chill, mid, chad, model, only, ignore, prompt, summarize, peer_review, mocker
+):
+    mocker.patch("py_do_you_even_diff_bro.main.get_git_diff", return_value="Test diff")
+    mocker.patch(
+        "py_do_you_even_diff_bro.main.gpt_prompt", return_value="Test response"
+    )
     main(chill, mid, chad, model, only, ignore, prompt, summarize, peer_review)
-    py_do_you_even_diff_bro.main.get_git_diff.assert_called_once_with(only, ignore, peer_review)
+    if get_git_diff:
+        py_do_you_even_diff_bro.main.get_git_diff.assert_called_once_with(
+            only, ignore, peer_review
+        )
+    else:
+        py_do_you_even_diff_bro.main.get_git_diff.assert_not_called()
     py_do_you_even_diff_bro.main.gpt_prompt.assert_called()
+
+
+# Test with a different model
+def test_main_with_different_model(mocker):
+    mocker.patch("py_do_you_even_diff_bro.main.get_git_diff", return_value="Test diff")
+    mocker.patch(
+        "py_do_you_even_diff_bro.main.gpt_prompt", return_value="Test response"
+    )
+    main(
+        False,
+        True,
+        False,
+        "gpt-3.5-turbo",
+        [".py"],
+        [".ts"],
+        "Test prompt",
+        True,
+        "main",
+    )
+    py_do_you_even_diff_bro.main.get_git_diff.assert_called_once_with(
+        [".py"], [".ts"], "main"
+    )
+    py_do_you_even_diff_bro.main.gpt_prompt.assert_called()
+
+
+# Test with a different file type
+def test_main_with_different_file_type(mocker):
+    mocker.patch("py_do_you_even_diff_bro.main.get_git_diff", return_value="Test diff")
+    mocker.patch(
+        "py_do_you_even_diff_bro.main.gpt_prompt", return_value="Test response"
+    )
+    main(
+        False,
+        True,
+        False,
+        "gpt-3.5-turbo",
+        [".java"],
+        [".ts"],
+        "Test prompt",
+        True,
+        "main",
+    )
+    py_do_you_even_diff_bro.main.get_git_diff.assert_called_once_with(
+        [".java"], [".ts"], "main"
+    )
+    py_do_you_even_diff_bro.main.gpt_prompt.assert_called()
+
+
+# Test with a different prompt value
+def test_main_with_different_prompt(mocker):
+    mocker.patch("py_do_you_even_diff_bro.main.get_git_diff", return_value="Test diff")
+    mocker.patch(
+        "py_do_you_even_diff_bro.main.gpt_prompt", return_value="Test response"
+    )
+    main(
+        False,
+        True,
+        False,
+        "gpt-3.5-turbo",
+        [".py"],
+        [".ts"],
+        "Different prompt",
+        True,
+        "main",
+    )
+    py_do_you_even_diff_bro.main.get_git_diff.assert_called_once_with(
+        [".py"], [".ts"], "main"
+    )
+    py_do_you_even_diff_bro.main.gpt_prompt.assert_called()
+
+
+# Test with a different peer_review value
+def test_main_with_different_peer_review(mocker):
+    mocker.patch("py_do_you_even_diff_bro.main.get_git_diff", return_value="Test diff")
+    mocker.patch(
+        "py_do_you_even_diff_bro.main.gpt_prompt", return_value="Test response"
+    )
+    main(
+        False,
+        True,
+        False,
+        "gpt-3.5-turbo",
+        [".py"],
+        [".ts"],
+        "Test prompt",
+        True,
+        False,
+    )
+    py_do_you_even_diff_bro.main.get_git_diff.assert_called_once_with(
+        [".py"], [".ts"], False
+    )
+    py_do_you_even_diff_bro.main.gpt_prompt.assert_called()
+
+
+# Test with a different summarize value
+def test_main_with_different_summarize(mocker):
+    mocker.patch("py_do_you_even_diff_bro.main.get_git_diff", return_value="Test diff")
+    mocker.patch(
+        "py_do_you_even_diff_bro.main.gpt_prompt", return_value="Test response"
+    )
+    main(
+        False,
+        True,
+        False,
+        "gpt-3.5-turbo",
+        [".py"],
+        [".ts"],
+        "Test prompt",
+        False,
+        "main",
+    )
+    py_do_you_even_diff_bro.main.get_git_diff.assert_called_once_with(
+        [".py"], [".ts"], "main"
+    )
+    py_do_you_even_diff_bro.main.gpt_prompt.assert_called()
+
+
+# Test error scenario
+def test_main_with_error(mocker):
+    mocker.patch(
+        "py_do_you_even_diff_bro.main.get_git_diff", side_effect=Exception("Test error")
+    )
+    if not get_git_diff:
+        with pytest.raises(Exception, match="Test error"):
+            main(
+                False,
+                True,
+                False,
+                "gpt-3.5-turbo",
+                [".py"],
+                [".ts"],
+                "Test prompt",
+                True,
+                "main",
+            )
